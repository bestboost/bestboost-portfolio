import express from "express";
import multer from "multer";
import { GridFsStorage } from "multer-gridfs-storage";
import mongoose from "mongoose";
import dotenv from "dotenv";

dotenv.config();

const router = express.Router();

// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–æ—Ç–æ–≤–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è mongoose
const db = mongoose.connection;

// // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è GridFS Storage
// const storage = new GridFsStorage({
//   db, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–µ –∑'—î–¥–Ω–∞–Ω–Ω—è
//   file: (req, file) => ({
//     filename: `${file.fieldname}-${Date.now()}.pdf`,
//     bucketName: "resumes", // –ö–æ–ª–µ–∫—Ü—ñ—è –≤ MongoDB
//   }),
// });

// const upload = multer({ storage });

// üìå –ï–Ω–¥–ø–æ—ó–Ω—Ç –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
router.post("/upload", (req, res) => {
  const gfs = new mongoose.mongo.GridFSBucket(mongoose.connection.db, {
    bucketName: "resumes",
  });

  const uploadStream = gfs.openUploadStream(`resume-${Date.now()}.pdf`);
  req.pipe(uploadStream);

  uploadStream.on("error", (err) => {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:", err);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É" });
  });

  uploadStream.on("finish", () => {
    res.json({ fileId: uploadStream.id });
  });
});

router.get("/list", async (req, res) => {
  try {
    const gfs = new mongoose.mongo.GridFSBucket(mongoose.connection.db, {
      bucketName: "resumes",
    });
    const files = await gfs.find().toArray();
    res.json(files);
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ–∞–π–ª—ñ–≤" });
  }
});

// üìå –ï–Ω–¥–ø–æ—ó–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—é–º–µ
router.get("/download/:id", async (req, res) => {
  const gfs = new mongoose.mongo.GridFSBucket(db, { bucketName: "resumes" });

  try {
    const file = await gfs
      .find({ _id: new mongoose.Types.ObjectId(req.params.id) })
      .toArray();
    if (!file.length) {
      return res.status(404).json({ error: "–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    res.set("Content-Type", "application/pdf");
    gfs.openDownloadStream(file[0]._id).pipe(res);
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—É" });
  }
});

export default router;
