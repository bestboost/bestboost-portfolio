import mongoose from "mongoose";
import fs from "fs";
import path from "path";
import sharp from "sharp";

const getGFS = () => {
  return new mongoose.mongo.GridFSBucket(mongoose.connection.db, {
    bucketName: "certificates",
  });
};

// üìå –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É
export const uploadCertificate = (req, res) => {
  if (!req.file) {
    return res.status(400).json({ error: "–§–∞–π–ª –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ" });
  }

  const gfs = getGFS();
  const filePath = req.file.path;

  const uploadStream = gfs.openUploadStream(req.file.originalname, {
    contentType: req.file.mimetype, // ‚úÖ –î–æ–¥–∞—î–º–æ MIME-—Ç–∏–ø (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, image/jpeg)
  });

  fs.createReadStream(filePath)
    .pipe(uploadStream)
    .on("error", (err) =>
      res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è" })
    )
    .on("finish", () =>
      res.json({ id: uploadStream.id, filename: req.file.originalname })
    );
};

// üìå –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º—ñ–Ω—ñ–∞—Ç—é—Ä–∏
export const uploadThumbnail = (req, res) => {
  if (!req.file) {
    return res.status(400).json({ error: "–§–∞–π–ª –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ" });
  }

  const gfs = new mongoose.mongo.GridFSBucket(mongoose.connection.db, {
    bucketName: "thumbnails", // –û–∫—Ä–µ–º–∏–π –±–∞–∫–µ—Ç –¥–ª—è –º—ñ–Ω—ñ–∞—Ç—é—Ä
  });
  const tempPath = req.file.path;
  const optimizedPath = path.join("uploads", `thumb_${req.file.filename}.jpeg`);

  sharp(tempPath)
    .resize(300) // –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –¥–ª—è —Å–ø–∏—Å–∫—É
    .jpeg({ quality: 70 }) // –°—Ç–∏—Å–∫–∞—î–º–æ –±–µ–∑ –∑–Ω–∞—á–Ω–æ—ó –≤—Ç—Ä–∞—Ç–∏ —è–∫–æ—Å—Ç—ñ
    .toFile(optimizedPath)
    .then(() => {
      const uploadStream = gfs.openUploadStream(req.file.originalname, {
        contentType: "image/jpeg",
      });

      fs.createReadStream(optimizedPath)
        .pipe(uploadStream)
        .on("error", (err) => res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è" }))
        .on("finish", () => {
          fs.unlinkSync(tempPath); // –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
          fs.unlinkSync(optimizedPath); // –í–∏–¥–∞–ª—è—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π —Ñ–∞–π–ª
          res.json({ id: uploadStream.id, filename: req.file.originalname });
        });
    })
    .catch((err) => res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è" }));
};

export const listThumbnails = async (req, res) => {
  try {
    const gfs = new mongoose.mongo.GridFSBucket(mongoose.connection.db, {
      bucketName: "thumbnails", // –ë–∞–∫–µ—Ç –¥–ª—è –º—ñ–Ω—ñ–∞—Ç—é—Ä
    });

    const files = await gfs.find().toArray();

    if (!files || files.length === 0) {
      return res.status(404).json({ error: "–ú—ñ–Ω—ñ–∞—Ç—é—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ" });
    }

    const formattedFiles = files.map((file) => ({
      _id: file._id,
      filename: file.filename,
      imageUrl: `http://localhost:5000/api/certificates/thumbnail/${file._id}`, 
    }));

    res.json(formattedFiles);
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º—ñ–Ω—ñ–∞—Ç—é—Ä" });
  }
};

// üìå –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º—ñ–Ω—ñ–∞—Ç—é—Ä–∏ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∞ –∑–∞ ID
export const getThumbnail = (req, res) => {
  const fileId = req.params.id;
  const gfs = new mongoose.mongo.GridFSBucket(mongoose.connection.db, {
    bucketName: "thumbnails", // –û–∫—Ä–µ–º–∏–π –±–∞–∫–µ—Ç –¥–ª—è –º—ñ–Ω—ñ–∞—Ç—é—Ä
  });

  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º—ñ–Ω—ñ–∞—Ç—é—Ä—É –ø–æ ID
  gfs.openDownloadStream(new mongoose.Types.ObjectId(fileId))
    .pipe(res)
    .on("error", () => res.status(404).json({ error: "–ú—ñ–Ω—ñ–∞—Ç—é—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" }));
};


// // üìå –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤
// export const listCertificates = async (req, res) => {
//   try {
//     const gfs = new mongoose.mongo.GridFSBucket(mongoose.connection.db, {
//       bucketName: "thumbnails", // –û–∫—Ä–µ–º–∏–π –±–∞–∫–µ—Ç –¥–ª—è –º—ñ–Ω—ñ–∞—Ç—é—Ä
//     });
//     const files = await gfs.find().toArray();

//     if (!files || files.length === 0) {
//       return res.status(404).json({ error: "–§–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ" });
//     }

//     // –ö–æ–∂–µ–Ω —Ñ–∞–π–ª –º–∞—î —Å–≤—ñ–π contentType, —Ç–æ–º—É –º–∏ –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–¥–∞—î–º–æ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤
//     const formattedFiles = files.map((file) => ({
//       _id: file._id,
//       filename: file.filename,
//       // contentType: file.contentType, // –¢—É—Ç –±—É–¥–µ MIME-—Ç–∏–ø –∫–æ–∂–Ω–æ–≥–æ —Ñ–∞–π–ª—É
//     }));

//     res.json(formattedFiles);
//   } catch (error) {
//     res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ–∞–π–ª—ñ–≤" });
//   }
// };

// üìå –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É
export const viewCertificate = async (req, res) => {
  try {
    const gfs = getGFS();
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ error: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID" });
    }

    const objectId = new mongoose.Types.ObjectId(id);

    // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≥–ª—è–¥–æ–º
    const files = await gfs.find({ _id: objectId }).toArray();
    if (!files.length) {
      return res.status(404).json({ error: "–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    const filename = files[0].filename;

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è inline –ø–µ—Ä–µ–≥–ª—è–¥—É (–±–µ–∑ —Å–∫–∞—á—É–≤–∞–Ω–Ω—è)
    res.set("Content-Disposition", `inline; filename="${filename}"`);
    res.set("Content-Type", files[0].contentType);

    const downloadStream = gfs.openDownloadStream(objectId);

    downloadStream.on("error", (err) => {
      res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    });

    // –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –ø–æ—Ç—ñ–∫ –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É
    downloadStream.pipe(res);
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};
