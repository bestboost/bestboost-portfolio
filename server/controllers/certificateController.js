import mongoose from "mongoose";
import fs from "fs";

const getGFS = () => {
  return new mongoose.mongo.GridFSBucket(mongoose.connection.db, {
    bucketName: "certificates",
  });
};

// üìå –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É
export const uploadCertificate = (req, res) => {
  if (!req.file) {
    return res.status(400).json({ error: "–§–∞–π–ª –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ" });
  }

  const gfs = getGFS();
  const filePath = req.file.path;

  const uploadStream = gfs.openUploadStream(req.file.originalname, {
    contentType: req.file.mimetype, // ‚úÖ –î–æ–¥–∞—î–º–æ MIME-—Ç–∏–ø (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, image/jpeg)
  });

  fs.createReadStream(filePath)
    .pipe(uploadStream)
    .on("error", (err) =>
      res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è" })
    )
    .on("finish", () =>
      res.json({ id: uploadStream.id, filename: req.file.originalname })
    );
};

// üìå –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤
export const listCertificates = async (req, res) => {
  try {
    const gfs = getGFS();
    const files = await gfs.find().toArray();

    if (!files || files.length === 0) {
      return res.status(404).json({ error: "–§–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ" });
    }

    // –ö–æ–∂–µ–Ω —Ñ–∞–π–ª –º–∞—î —Å–≤—ñ–π contentType, —Ç–æ–º—É –º–∏ –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–¥–∞—î–º–æ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤
    const formattedFiles = files.map((file) => ({
      _id: file._id,
      filename: file.filename,
      contentType: file.contentType, // –¢—É—Ç –±—É–¥–µ MIME-—Ç–∏–ø –∫–æ–∂–Ω–æ–≥–æ —Ñ–∞–π–ª—É
    }));

    res.json(formattedFiles);
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ–∞–π–ª—ñ–≤" });
  }
};

// üìå –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª—É
export const downloadCertificate = async (req, res) => {
  try {
    const gfs = new mongoose.mongo.GridFSBucket(mongoose.connection.db, {
      bucketName: "certificates",
    });

    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ error: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID" });
    }

    const objectId = new mongoose.Types.ObjectId(id);

    // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º
    const files = await gfs.find({ _id: objectId }).toArray();
    if (!files.length) {
      return res.status(404).json({ error: "–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    const filename = files[0].filename;
    res.set("Content-Disposition", `inline; filename="${filename}"`);
    res.set("Content-Type", files[0].contentType);

    const downloadStream = gfs.openDownloadStream(objectId);

    downloadStream.on("error", (err) => {
      res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    });

    downloadStream.pipe(res);
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};
